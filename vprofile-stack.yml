- name: Create EC2 for App stack
  hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Include out vars
      include_vars: out_IDs

    - name: Include out vars
      include_vars: vpc-setup
    
    - name: Include out vars
      include_vars: vprofile-stack-vars

    - name: Create key for ec2 instances
      amazon.aws.ec2_key:
        name: vprofilestack-key
        region: "{{ region }}"
      register: key_out

    - name: Save private key into file vprofilestack-key.pem
      copy:
        content: "{{ key_out.key.private_key }}"
        dest: "./vprofilestack-key.pem"
        mode: 0600
      when: key_out.changed

    - name: Create Security Group for Load Balancer
      amazon.aws.ec2_security_group:
        name: vproELB-sg
        description: Allow port 80 from everywhere and all ports within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create Security Group for Vprofile Stack
      amazon.aws.ec2_security_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all ports within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: sg-0d7fd479182d106b7
      register: vproStackSG_out

    - name: Creating Nginx web01
      amazon.aws.ec2_instance:
        key_name: vprofilestack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        vpc_subnet_id: "{{ privatesubnet1 }}"
      register: web01_out

    - name: Creating Tomcat app01
      amazon.aws.ec2_instance:
        key_name: vprofilestack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        vpc_subnet_id: "{{ privatesubnet1 }}"
      register: app01_out

    - name: Creating Memcache mc01
      amazon.aws.ec2_instance:
        key_name: vprofilestack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        vpc_subnet_id: "{{ privatesubnet1 }}"
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      amazon.aws.ec2_instance:
        key_name: vprofilestack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        vpc_subnet_id: "{{ privatesubnet1 }}"
      register: rmq01_out

    - name: Creating MySQL db01
      amazon.aws.ec2_instance:
        key_name: vprofilestack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        vpc_subnet_id: "{{ privatesubnet1 }}"
      register: db01_out

    - name: Print the instance ID
      debug:
        msg: "Instance ID: {{ db01_out.instance_ids[0] }}"

  

    - name: Create vprofile-elb
      amazon.aws.elb_application_lb:
       name: "vprofile-elb"
       region: "{{ region }}"
       state: present
       security_groups:
        - "{{ vproELBSG_out.group_id }}"
       subnets:
        - "{{ publicsubnet1 }}"  # Ensure these subnets are spread across AZs
        - "{{ publicsubnet2 }}"
        - "{{ publicsubnet3 }}"
       listeners:
        - port: 80
          protocol: HTTP
        # Add health checks here (refer to Ansible documentation for details)
       tags:
         Name: vprofile-elb
